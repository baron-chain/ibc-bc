syntax = "proto3";

package ibc.core.channel.v1;

option go_package = "github.com/cosmos/ibc-go/v7/modules/core/04-channel/types";

import "gogoproto/gogo.proto";
import "ibc/core/client/v1/client.proto";

message Channel {
  option (gogoproto.goproto_getters) = false;

  State state = 1;
  Order ordering = 2;
  Counterparty counterparty = 3 [(gogoproto.nullable) = false];
  repeated string connection_hops = 4 [(gogoproto.moretags) = "yaml:\"connection_hops\""];
  string version = 5;
}

message IdentifiedChannel {
  option (gogoproto.goproto_getters) = false;

  State state = 1;
  Order ordering = 2;
  Counterparty counterparty = 3 [(gogoproto.nullable) = false];
  repeated string connection_hops = 4 [(gogoproto.moretags) = "yaml:\"connection_hops\""];
  string version = 5;
  string port_id = 6;
  string channel_id = 7;
}

enum State {
  option (gogoproto.goproto_enum_prefix) = false;

  STATE_UNINITIALIZED_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "UNINITIALIZED"];
  STATE_INIT = 1 [(gogoproto.enumvalue_customname) = "INIT"];
  STATE_TRYOPEN = 2 [(gogoproto.enumvalue_customname) = "TRYOPEN"];
  STATE_OPEN = 3 [(gogoproto.enumvalue_customname) = "OPEN"];
  STATE_CLOSED = 4 [(gogoproto.enumvalue_customname) = "CLOSED"];
}

enum Order {
  option (gogoproto.goproto_enum_prefix) = false;

  ORDER_NONE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "NONE"];
  ORDER_UNORDERED = 1 [(gogoproto.enumvalue_customname) = "UNORDERED"];
  ORDER_ORDERED = 2 [(gogoproto.enumvalue_customname) = "ORDERED"];
}

message Counterparty {
  option (gogoproto.goproto_getters) = false;

  string port_id = 1 [(gogoproto.moretags) = "yaml:\"port_id\""];
  string channel_id = 2 [(gogoproto.moretags) = "yaml:\"channel_id\""];
}

message Packet {
  option (gogoproto.goproto_getters) = false;

  uint64 sequence = 1;
  string source_port = 2 [(gogoproto.moretags) = "yaml:\"source_port\""];
  string source_channel = 3 [(gogoproto.moretags) = "yaml:\"source_channel\""];
  string destination_port = 4 [(gogoproto.moretags) = "yaml:\"destination_port\""];
  string destination_channel = 5 [(gogoproto.moretags) = "yaml:\"destination_channel\""];
  bytes data = 6;
  ibc.core.client.v1.Height timeout_height = 7 [
    (gogoproto.moretags) = "yaml:\"timeout_height\"",
    (gogoproto.nullable) = false
  ];
  uint64 timeout_timestamp = 8 [(gogoproto.moretags) = "yaml:\"timeout_timestamp\""];
}

message PacketState {
  option (gogoproto.goproto_getters) = false;

  string port_id = 1 [(gogoproto.moretags) = "yaml:\"port_id\""];
  string channel_id = 2 [(gogoproto.moretags) = "yaml:\"channel_id\""];
  uint64 sequence = 3;
  bytes data = 4;
}

message PacketId {
  option (gogoproto.goproto_getters) = false;

  string port_id = 1 [(gogoproto.moretags) = "yaml:\"port_id\""];
  string channel_id = 2 [(gogoproto.moretags) = "yaml:\"channel_id\""];
  uint64 sequence = 3;
}

message Acknowledgement {
  oneof response {
    bytes result = 21;
    string error = 22;
  }
}
